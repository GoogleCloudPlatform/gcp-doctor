{
  "id": "projects/gcpd-gce1-4exv/zones/europe-west1-b/instances",
  "items": [
    {
      "canIpForward": true,
      "cpuPlatform": "Intel Haswell",
      "creationTimestamp": "2021-03-29T06:39:40.313-07:00",
      "deletionProtection": false,
      "disks": [
        {
          "autoDelete": true,
          "boot": true,
          "deviceName": "persistent-disk-0",
          "diskSizeGb": "100",
          "guestOsFeatures": [
            {
              "type": "VIRTIO_SCSI_MULTIQUEUE"
            },
            {
              "type": "SEV_CAPABLE"
            },
            {
              "type": "UEFI_COMPATIBLE"
            },
            {
              "type": "SECURE_BOOT"
            }
          ],
          "index": 0,
          "interface": "SCSI",
          "kind": "compute#attachedDisk",
          "licenses": [
            "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
            "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node",
            "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos",
            "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos"
          ],
          "mode": "READ_WRITE",
          "shieldedInstanceInitialState": {
            "dbs": [
              {
                "content": "REDACTED",
                "fileType": "X509"
              }
            ],
            "dbxs": [
              {
                "content": "REDACTED",
                "fileType": "X509"
              },
              {
                "content": "REDACTED",
                "fileType": "X509"
              },
              {
                "content": "REDACTED",
                "fileType": "X509"
              },
              {
                "content": "REDACTED",
                "fileType": "X509"
              }
            ],
            "keks": [
              {
                "content": "REDACTED",
                "fileType": "X509"
              }
            ],
            "pk": {
              "content": "REDACTED",
              "fileType": "X509"
            }
          },
          "source": "https://www.googleapis.com/compute/v1/projects/gcpd-gce1-4exv/zones/europe-west1-b/disks/gke-gke1-default-pool-d8701509-bmrw",
          "type": "PERSISTENT"
        }
      ],
      "fingerprint": "tPFfh6jIpro=",
      "id": "6350899832341423732",
      "kind": "compute#instance",
      "labelFingerprint": "mUgogP08_Iw=",
      "labels": {
        "gcp_doctor_test": "gke",
        "goog-gke-node": ""
      },
      "lastStartTimestamp": "2021-03-29T06:39:48.364-07:00",
      "machineType": "https://www.googleapis.com/compute/v1/projects/gcpd-gce1-4exv/zones/europe-west1-b/machineTypes/e2-small",
      "metadata": {
        "fingerprint": "5yUfpiGpso8=",
        "items": [
          {
            "key": "instance-template",
            "value": "projects/50670056743/global/instanceTemplates/gke-gke1-default-pool-d8701509"
          },
          {
            "key": "created-by",
            "value": "projects/50670056743/zones/europe-west1-b/instanceGroupManagers/gke-gke1-default-pool-d8701509-grp"
          },
          {
            "key": "serial-port-logging-enable",
            "value": "true"
          },
          {
            "key": "kube-labels",
            "value": "cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=e2"
          },
          {
            "key": "google-compute-enable-pcid",
            "value": "true"
          },
          {
            "key": "enable-oslogin",
            "value": "false"
          },
          {
            "key": "kubelet-config",
            "value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: /etc/srv/kubernetes/pki/ca-certificates.crt\nauthorization:\n  mode: Webhook\ncgroupRoot: /\nclusterDNS:\n- 10.3.240.10\nclusterDomain: cluster.local\nenableDebuggingHandlers: true\nevictionHard:\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\n  pid.available: 10%\nfeatureGates:\n  DynamicKubeletConfig: false\n  RotateKubeletServerCertificate: true\nkind: KubeletConfiguration\nkubeReserved:\n  cpu: 1060m\n  ephemeral-storage: 41Gi\n  memory: 512Mi\nreadOnlyPort: 10255\nserverTLSBootstrap: true\nstaticPodPath: /etc/kubernetes/manifests\n"
          },
          {
            "key": "cluster-name",
            "value": "gke1"
          },
          {
            "key": "gci-update-strategy",
            "value": "update_disabled"
          },
          {
            "key": "gci-metrics-enabled",
            "value": "true"
          },
          {
            "key": "gci-ensure-gke-docker",
            "value": "true"
          },
          {
            "key": "configure-sh",
            "value": "#!/usr/bin/env bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\"v0.8.7\"\nDEFAULT_CNI_HASH=\"8f2cbee3b5f94d59f919054dccfe99a8e3db5473b553d91da8af4763e811138533e05df4dbeab16b3f774852b4184a7994968f5e036a3f531ad1ac4620d10ede\"\nDEFAULT_NPD_VERSION=\"v0.8.5\"\nDEFAULT_NPD_HASH=\"3fbf97a38c06d8fcc8c46f956a6e90aa1b47cb42d50ddcfd1a644a7e624e42ee523db2f81e08fbfb21b80142d4bafdbedce16e8b62d2274a5b2b703a56d9c015\"\nDEFAULT_CRICTL_VERSION=\"v1.17.0\"\nDEFAULT_CRICTL_HASH=\"94e79b1fdea60247203025c4e737af7cb4bbfa1e7c7d9b0be078b4906e24c70a34944557e5406321eb3764d0dea0ded040df57f5a307e2225bd97bdac0cad05d\"\nDEFAULT_MOUNTER_TAR_SHA=\"7956fd42523de6b3107ddc3ce0e75233d2fcb78436ff07a1389b6eaac91fb2b1b72a08f7a219eaf96ba1ca4da8d45271002e0d60e0644e796c665f99bb356516\"\n###\n\n# Use --retry-connrefused opt only if it's supported by curl.\nCURL_RETRY_CONNREFUSED=\"\"\nif curl --help | grep -q -- '--retry-connrefused'; then\n  CURL_RETRY_CONNREFUSED='--retry-connrefused'\nfi\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\n# A function that fetches a GCE metadata value and echoes to STDOUT.\n#\n# $1: URL path after /computeMetadata/v1/ (without heading slash).\nfunction get-metadata-value {\n    curl \\\n        --retry 5 \\\n        --retry-delay 3 \\\n        ${CURL_RETRY_CONNREFUSED} \\\n        --fail \\\n        --silent \\\n        -H 'Metadata-Flavor: Google' \\\n        \"http://metadata/computeMetadata/v1/${1}\"\n}\n\n# A function to fetch kube-env from GCE metadata server\n# or using hurl on the master if available\nfunction download-kube-env {\n  (\n    umask 077\n\n    local kube_env_path=\"/tmp/kube-env.yaml\"\n    if [[ \"$(is-master)\" == \"true\" && $(use-hurl) = \"true\" ]]; then\n      local kube_env_path=\"${KUBE_HOME}/kube-env.yaml\"\n      download-kube-env-hurl \"${kube_env_path}\"\n    else\n      local meta_path=\"http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\"\n      echo \"Downloading kube-env via GCE metadata from ${meta_path} to ${kube_env_path}\"\n      curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n        -H \"X-Google-Metadata-Request: True\" \\\n        -o \"${kube_env_path}\" \\\n        \"${meta_path}\"\n    fi\n\n    # Convert the yaml format file into a shell-style file.\n    eval $(${PYTHON} -c '''\nimport pipes,sys,yaml\n# check version of python and call methods appropriate for that version\nif sys.version_info[0] < 3:\n    items = yaml.load(sys.stdin).iteritems()\nelse:\n    items = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print(\"readonly {var}={value}\".format(var=k, value=pipes.quote(str(v))))\n''' < \"${kube_env_path}\" > \"${KUBE_HOME}/kube-env\")\n\n    # Leave kube-env if we are a master\n    if [[ \"$(is-master)\" != \"true\" ]]; then\n      rm -f \"${kube_env_path}\"\n    fi\n  )\n}\n\n# A function to pull kube-env from HMS using hurl\nfunction download-kube-env-hurl {\n  local -r kube_env_path=\"$1\"\n  local -r endpoint=$(get-metadata-value \"instance/attributes/gke-api-endpoint\")\n  local -r kube_env_hms_path=$(get-metadata-value \"instance/attributes/kube-env-path\")\n\n  echo \"Downloading kube-env via hurl from ${kube_env_hms_path} to ${kube_env_path}\"\n  ${KUBE_HOME}/bin/hurl --hms_address $endpoint \\\n    --dst \"${kube_env_path}\" \\\n    $kube_env_hms_path\n  chmod 600 \"${kube_env_path}\"\n}\n\nfunction download-kubelet-config {\n  local -r dest=\"$1\"\n  echo \"Downloading Kubelet config file, if it exists\"\n  # Fetch kubelet config file from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kubelet_config=\"/tmp/kubelet-config.yaml\"\n    if curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n        -H \"X-Google-Metadata-Request: True\" \\\n        -o \"${tmp_kubelet_config}\" \\\n        http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config; then\n      # only write to the final location if curl succeeds\n      mv \"${tmp_kubelet_config}\" \"${dest}\"\n    elif [[ \"${REQUIRE_METADATA_KUBELET_CONFIG_FILE:-false}\" == \"true\" ]]; then\n      echo \"== Failed to download required Kubelet config file from metadata server ==\"\n      exit 1\n    fi\n  )\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-master-certs from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_master_certs=\"/tmp/kube-master-certs.yaml\"\n    curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n      -H \"X-Google-Metadata-Request: True\" \\\n      -o \"${tmp_kube_master_certs}\" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n    # Convert the yaml format file into a shell-style file.\n    eval $(${PYTHON} -c '''\nimport pipes,sys,yaml\n# check version of python and call methods appropriate for that version\nif sys.version_info[0] < 3:\n    items = yaml.load(sys.stdin).iteritems()\nelse:\n    items = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print(\"readonly {var}={value}\".format(var=k, value=pipes.quote(str(v))))\n''' < \"${tmp_kube_master_certs}\" > \"${KUBE_HOME}/kube-master-certs\")\n    rm -f \"${tmp_kube_master_certs}\"\n  )\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual_sha1=$(sha1sum \"${file}\" | awk '{ print $1 }') || true\n  actual_sha512=$(sha512sum \"${file}\" | awk '{ print $1 }') || true\n  if [[ \"${actual_sha1}\" != \"${expected}\" ]] && [[ \"${actual_sha512}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual_sha1}/sha512 ${actual_sha512} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Get default service account credentials of the VM.\nGCE_METADATA_INTERNAL=\"http://metadata.google.internal/computeMetadata/v1/instance\"\nfunction get-credentials {\n  curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \"${GCE_METADATA_INTERNAL}/service-accounts/default/token\" -H \"Metadata-Flavor: Google\" -s | ${PYTHON} -c \\\n    'import sys; import json; print(json.loads(sys.stdin.read())[\"access_token\"])'\n}\n\nfunction valid-storage-scope {\n  curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \"${GCE_METADATA_INTERNAL}/service-accounts/default/scopes\" -H \"Metadata-Flavor: Google\" -s | grep -E \"auth/devstorage|auth/cloud-platform\"\n}\n\n# Determine if this node is a master using metadata\nfunction is-master {\n  local -r is_master_val=$(get-metadata-value \"instance/attributes/is-master-node\")\n\n  local result=\"false\"\n  if [[ ${is_master_val:-} == \"true\" ]]; then\n    result=\"true\"\n  fi\n  echo $result\n}\n\n# A function that returns \"true\" if hurl should be used, \"false\" otherwise.\nfunction use-hurl {\n  local -r enable_hms_read=$(get-metadata-value \"instance/attributes/enable_hms_read\")\n  local result=\"false\"\n\n  if [[ -f \"${KUBE_HOME}/bin/hurl\" && \"${enable_hms_read}\" == \"true\" ]]; then\n    result=\"true\"\n  fi\n  echo $result\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha512/sha1 hash of the URL. Can be \"\" if the sha512/sha1 hash is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      # if the url belongs to GCS API we should use oauth2_token in the headers\n      local curl_headers=\"\"\n      if [[ \"$url\" =~ ^https://storage.googleapis.com.* ]] && valid-storage-scope ; then\n        curl_headers=\"Authorization: Bearer $(get-credentials)\"\n      fi\n      if ! curl ${curl_headers:+-H \"${curl_headers}\"} -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 ${CURL_RETRY_CONNREFUSED} \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (HASH = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs \"${key},${value}\" \"${KUBE_HOME}/preload_info\"\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p $flexvolume_plugin_dir\n  mount --bind $flexvolume_plugin_dir $flexvolume_plugin_dir\n  mount -o remount,exec $flexvolume_plugin_dir\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME=\"${KUBE_HOME}/containerized_mounter\"\n  local -r mounter_tar_sha=\"${DEFAULT_MOUNTER_TAR_SHA}\"\n  if is-preloaded \"mounter\" \"${mounter_tar_sha}\"; then\n    echo \"mounter is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading gci mounter tools.\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  download-or-bust \"${mounter_tar_sha}\" \"https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar\"\n  cp \"${KUBE_HOME}/kubernetes/server/bin/mounter\" \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  mv \"${KUBE_HOME}/mounter.tar\" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  rm /tmp/mounter.tar\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet\"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n  if [[ -n \"${NODE_PROBLEM_DETECTOR_VERSION:-}\" ]]; then\n      local -r npd_version=\"${NODE_PROBLEM_DETECTOR_VERSION}\"\n      local -r npd_hash=\"${NODE_PROBLEM_DETECTOR_TAR_HASH}\"\n  else\n      local -r npd_version=\"${DEFAULT_NPD_VERSION}\"\n      local -r npd_hash=\"${DEFAULT_NPD_HASH}\"\n  fi\n  local -r npd_tar=\"node-problem-detector-${npd_version}.tar.gz\"\n\n  if is-preloaded \"${npd_tar}\" \"${npd_hash}\"; then\n    echo \"${npd_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading ${npd_tar}.\"\n  local -r npd_release_path=\"${NODE_PROBLEM_DETECTOR_RELEASE_PATH:-https://storage.googleapis.com/kubernetes-release}\"\n  download-or-bust \"${npd_hash}\" \"${npd_release_path}/node-problem-detector/${npd_tar}\"\n  local -r npd_dir=\"${KUBE_HOME}/node-problem-detector\"\n  mkdir -p \"${npd_dir}\"\n  tar xzf \"${KUBE_HOME}/${npd_tar}\" -C \"${npd_dir}\" --overwrite\n  mv \"${npd_dir}/bin\"/* \"${KUBE_BIN}\"\n  chmod a+x \"${KUBE_BIN}/node-problem-detector\"\n  rmdir \"${npd_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${npd_tar}\"\n}\n\nfunction install-cni-binaries {\n  if [[ -n \"${CNI_VERSION:-}\" ]]; then\n      local -r cni_version=\"${CNI_VERSION}\"\n      local -r cni_hash=\"${CNI_HASH}\"\n  else\n      local -r cni_version=\"${DEFAULT_CNI_VERSION}\"\n      local -r cni_hash=\"${DEFAULT_CNI_HASH}\"\n  fi\n\n  local -r cni_tar=\"${CNI_TAR_PREFIX}${cni_version}.tgz\"\n  local -r cni_url=\"${CNI_STORAGE_URL_BASE}/${cni_version}/${cni_tar}\"\n\n  if is-preloaded \"${cni_tar}\" \"${cni_hash}\"; then\n    echo \"${cni_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading cni binaries\"\n  download-or-bust \"${cni_hash}\" \"${cni_url}\"\n  local -r cni_dir=\"${KUBE_HOME}/cni\"\n  mkdir -p \"${cni_dir}/bin\"\n  tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}/bin\" --overwrite\n  mv \"${cni_dir}/bin\"/* \"${KUBE_BIN}\"\n  rmdir \"${cni_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${cni_tar}\"\n}\n\n# Install crictl binary.\nfunction install-crictl {\n  if [[ -n \"${CRICTL_VERSION:-}\" ]]; then\n    local -r crictl_version=\"${CRICTL_VERSION}\"\n    local -r crictl_hash=\"${CRICTL_TAR_HASH}\"\n  else\n    local -r crictl_version=\"${DEFAULT_CRICTL_VERSION}\"\n    local -r crictl_hash=\"${DEFAULT_CRICTL_HASH}\"\n  fi\n  local -r crictl=\"crictl-${crictl_version}-linux-amd64\"\n\n  # Create crictl config file.\n  cat > /etc/crictl.yaml <<EOF\nruntime-endpoint: ${CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock}\nEOF\n\n  if is-preloaded \"${crictl}\" \"${crictl_hash}\"; then\n    echo \"crictl is preloaded\"\n    return\n  fi\n\n  echo \"Downloading crictl\"\n  local -r crictl_path=\"https://storage.googleapis.com/kubernetes-release/crictl\"\n  download-or-bust \"${crictl_hash}\" \"${crictl_path}/${crictl}\"\n  mv \"${KUBE_HOME}/${crictl}\" \"${KUBE_BIN}/crictl\"\n  chmod a+x \"${KUBE_BIN}/crictl\"\n}\n\nfunction install-exec-auth-plugin {\n  if [[ ! \"${EXEC_AUTH_PLUGIN_URL:-}\" ]]; then\n      return\n  fi\n  local -r plugin_url=\"${EXEC_AUTH_PLUGIN_URL}\"\n  local -r plugin_hash=\"${EXEC_AUTH_PLUGIN_HASH}\"\n\n  if is-preloaded \"gke-exec-auth-plugin\" \"${plugin_hash}\"; then\n    echo \"gke-exec-auth-plugin is preloaded\"\n    return\n  fi\n\n  echo \"Downloading gke-exec-auth-plugin binary\"\n  download-or-bust \"${plugin_hash}\" \"${plugin_url}\"\n  mv \"${KUBE_HOME}/gke-exec-auth-plugin\" \"${KUBE_BIN}/gke-exec-auth-plugin\"\n  chmod a+x \"${KUBE_BIN}/gke-exec-auth-plugin\"\n\n  if [[ ! \"${EXEC_AUTH_PLUGIN_LICENSE_URL:-}\" ]]; then\n      return\n  fi\n  local -r license_url=\"${EXEC_AUTH_PLUGIN_LICENSE_URL}\"\n  echo \"Downloading gke-exec-auth-plugin license\"\n  download-or-bust \"\" \"${license_url}\"\n  mv \"${KUBE_HOME}/LICENSE\" \"${KUBE_BIN}/gke-exec-auth-plugin-license\"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests hash (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha512}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha512\")\n  fi\n\n  if is-preloaded \"${manifests_tar}\" \"${manifests_tar_hash}\"; then\n    echo \"${manifests_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-k8s.gcr.io}\"\n  if [[ \"${kube_addon_registry}\" != \"k8s.gcr.io\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)k8s.gcr.io@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")k8s.gcr.io@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_BIN}/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/configure-kubeapiserver.sh\" \"${KUBE_BIN}/configure-kubeapiserver.sh\"\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh\" \"${KUBE_BIN}/\"\n  fi\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" \"${KUBE_BIN}/\"\n  fi\n\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_BIN}/health-monitor.sh\"\n\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha512\"\n}\n\n# Installs hurl to ${KUBE_HOME}/bin/hurl if not already installed.\nfunction install-hurl {\n  cd \"${KUBE_HOME}\"\n  if [[ -f \"${KUBE_HOME}/bin/hurl\" ]]; then\n    echo \"install-hurl: hurl already installed\"\n    return\n  fi\n\n  local -r hurl_gcs_att=\"instance/attributes/hurl-gcs-url\"\n  local -r hurl_gcs_url=$(get-metadata-value \"${hurl_gcs_att}\")\n\n  if [[ -z \"${hurl_gcs_url}\" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo \"install-hurl: Unable to find GCE metadata ${hurl_gcs_att}\"\n    return\n  fi\n\n  # Download hurl binary from a GCS bucket.\n  local -r hurl_bin=\"hurl\"\n  echo \"install-hurl: Installing hurl from ${hurl_gcs_url} ... \"\n  download-or-bust \"\" \"${hurl_gcs_url}\"\n  if [[ -f \"${KUBE_HOME}/${hurl_bin}\" ]]; then\n    chmod a+x ${KUBE_HOME}/${hurl_bin}\n    mv \"${KUBE_HOME}/${hurl_bin}\" \"${KUBE_BIN}/${hurl_bin}\"\n    echo \"install-hurl: hurl installed to ${KUBE_BIN}/${hurl_bin}\"\n    return\n  fi\n}\n\n# Installs inplace to ${KUBE_HOME}/bin/inplace if not already installed.\nfunction install-inplace {\n  cd \"${KUBE_HOME}\"\n  if [[ -f \"${KUBE_HOME}/bin/inplace\" ]]; then\n    echo \"install-inplace: inplace already installed\"\n    return\n  fi\n  local -r inplace_gcs_att=\"instance/attributes/inplace-gcs-url\"\n  local -r inplace_gcs_url=$(get-metadata-value \"${inplace_gcs_att}\")\n  if [[ -z \"${inplace_gcs_url}\" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo \"install-inplace: Unable to find GCE metadata ${inplace_gcs_att}\"\n    return\n  fi\n  echo \"install-inplace: Installing inplace from ${inplace_gcs_url} ...\"\n  download-or-bust \"\" \"${inplace_gcs_url}\"\n  local -r inplace_bin=\"inplace\"\n  if [[ -f \"${KUBE_HOME}/${inplace_bin}\" ]]; then\n    mv \"${KUBE_HOME}/${inplace_bin}\" \"${KUBE_BIN}/${inplace_bin}\"\n    if [[ ! -d \"${KUBE_HOME}/${inplace_bin}\" ]]; then\n      mkdir -p \"${KUBE_HOME}/${inplace_bin}\"\n    fi\n    cat > \"${KUBE_HOME}/${inplace_bin}/inplace.hash\" <<EOF\n${inplace_gcs_url}\nEOF\n    echo \"install-inplace: inplace installed to ${KUBE_BIN}/${inplace_bin}\"\n    return\n  fi\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo \"Try to load docker image file ${img}\"\n  # Temporarily turn off errexit, because we don't want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n  until timeout 30 ${LOAD_IMAGE_COMMAND:-docker load -i} \"${img}\"; do\n    if [[ \"${attempt_num}\" == \"${max_attempts}\" ]]; then\n      echo \"Fail to load docker image file ${img} after ${max_attempts} retries. Exit!!\"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo \"Start loading kube-system docker images\"\n  local -r img_dir=\"${KUBE_HOME}/kube-docker-files\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n    try-load-docker-image \"${img_dir}/kube-apiserver.tar\"\n    try-load-docker-image \"${img_dir}/kube-controller-manager.tar\"\n    try-load-docker-image \"${img_dir}/kube-scheduler.tar\"\n  else\n    try-load-docker-image \"${img_dir}/kube-proxy.tar\"\n  fi\n}\n\n# If we are on ubuntu we can try to install docker\nfunction install-docker {\n  # bailout if we are not on ubuntu\n  if ! command -v apt-get >/dev/null 2>&1; then\n    echo \"Unable to automatically install docker. Bailing out...\"\n    return\n  fi\n  # Install Docker deps, some of these are already installed in the image but\n  # that's fine since they won't re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  # Add the Docker apt-repository\n  curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg \\\n    | apt-key add -\n  add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n    $(lsb_release -cs) stable\"\n\n  # Install Docker\n  apt-get update && \\\n    apt-get install -y --no-install-recommends ${GCI_DOCKER_VERSION:-\"docker-ce=5:19.03.*\"}\n  rm -rf /var/lib/apt/lists/*\n}\n\n# If we are on ubuntu we can try to install containerd\nfunction install-containerd-ubuntu {\n  # bailout if we are not on ubuntu\n  if [[ -z \"$(command -v lsb_release)\" || $(lsb_release -si) != \"Ubuntu\" ]]; then\n    echo \"Unable to automatically install containerd in non-ubuntu image. Bailing out...\"\n    exit 2\n  fi\n\n  if [[ $(dpkg --print-architecture) != \"amd64\" ]]; then\n    echo \"Unable to automatically install containerd in non-amd64 image. Bailing out...\"\n    exit 2\n  fi\n\n  # Install dependencies, some of these are already installed in the image but\n  # that's fine since they won't re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  # Add the Docker apt-repository (as we install containerd from there)\n  curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg \\\n    | apt-key add -\n  add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n    $(lsb_release -cs) stable\"\n\n  # Install containerd from Docker repo\n  apt-get update && \\\n    apt-get install -y --no-install-recommends containerd\n  rm -rf /var/lib/apt/lists/*\n\n  # Override to latest versions of containerd and runc\n  systemctl stop containerd\n  if [[ ! -z \"${UBUNTU_INSTALL_CONTAINERD_VERSION:-}\" ]]; then\n    curl -fsSL \"https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}.linux-amd64.tar.gz\" | tar --overwrite -xzv -C /usr/\n  fi\n  if [[ ! -z \"${UBUNTU_INSTALL_RUNC_VERSION:-}\" ]]; then\n    curl -fsSL \"https://github.com/opencontainers/runc/releases/download/${UBUNTU_INSTALL_RUNC_VERSION}/runc.amd64\" --output /usr/sbin/runc && chmod 755 /usr/sbin/runc\n  fi\n  sudo systemctl start containerd\n}\n\nfunction ensure-container-runtime {\n  container_runtime=\"${CONTAINER_RUNTIME:-docker}\"\n  if [[ \"${container_runtime}\" == \"docker\" ]]; then\n    if ! command -v docker >/dev/null 2>&1; then\n      install-docker\n      if ! command -v docker >/dev/null 2>&1; then\n        echo \"ERROR docker not found. Aborting.\"\n        exit 2\n      fi\n    fi\n    docker version\n  elif [[ \"${container_runtime}\" == \"containerd\" ]]; then\n    # Install containerd/runc if requested\n    if [[ ! -z \"${UBUNTU_INSTALL_CONTAINERD_VERSION:-}\" || ! -z \"${UBUNTU_INSTALL_RUNC_VERSION:-}\" ]]; then\n      install-containerd-ubuntu\n    fi\n    # Verify presence and print versions of ctr, containerd, runc\n    if ! command -v ctr >/dev/null 2>&1; then\n      echo \"ERROR ctr not found. Aborting.\"\n      exit 2\n    fi\n    ctr --version\n\n    if ! command -v containerd >/dev/null 2>&1; then\n      echo \"ERROR containerd not found. Aborting.\"\n      exit 2\n    fi\n    containerd --version\n\n    if ! command -v runc >/dev/null 2>&1; then\n      echo \"ERROR runc not found. Aborting.\"\n      exit 2\n    fi\n    runc --version\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha512 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha512}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha512\")\n  fi\n\n  if is-preloaded \"${server_binary_tar}\" \"${server_binary_tar_hash}\"; then\n    echo \"${server_binary_tar} is preloaded.\"\n  else\n    echo \"Downloading binary release tar\"\n    download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n    tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n    local dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n    mkdir -p \"${dst_dir}\"\n    cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n    if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n      cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n    else\n      cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n      cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n    fi\n    load-docker-images\n    mv \"${src_dir}/kubelet\" \"${KUBE_BIN}\"\n    mv \"${src_dir}/kubectl\" \"${KUBE_BIN}\"\n\n    mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n    mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n  fi\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 \"${KUBE_BIN}\"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the \"exec\" option, if needed.\n  if [[ \"${REMOUNT_VOLUME_PLUGIN_DIR:-}\" == \"true\" && -n \"${VOLUME_PLUGIN_DIR:-}\" ]]; then\n    remount-flexvolume-directory \"${VOLUME_PLUGIN_DIR}\"\n  fi\n\n  # Install crictl on each node.\n  install-crictl\n\n  # TODO(awly): include the binary and license in the OS image.\n  install-exec-auth-plugin\n\n  # Source GKE specific scripts.\n  #\n  # This must be done after install-kube-manifests where the\n  # gke-internal-configure.sh is downloaded.\n  if [[ -e \"${KUBE_HOME}/bin/gke-internal-configure.sh\" ]]; then\n    echo \"Running GKE internal configuration script gke-internal-configure.sh\"\n    . \"${KUBE_HOME}/bin/gke-internal-configure.sh\"\n  fi\n\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]] && \\\n     [[ \"${ENABLE_NODE_PROBLEM_DETECTOR:-}\" == \"standalone\" ]]; then\n    install-node-problem-detector\n    if [[ -e \"${KUBE_HOME}/bin/gke-internal-configure.sh\" ]]; then\n      install-npd-custom-plugins\n    fi\n  fi\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha512\"\n}\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\n# if install fails, message-of-the-day (motd) will warn at login shell\nset-broken-motd\n\nKUBE_HOME=\"/home/kubernetes\"\nKUBE_BIN=\"${KUBE_HOME}/bin\"\nPYTHON=\"python\"\n\nif [[ \"$(python -V 2>&1)\" =~ \"Python 2\" ]]; then\n  # found python2, just use that\n  PYTHON=\"python\"\nelif [[ -f \"/usr/bin/python2.7\" ]]; then\n  # System python not defaulted to python 2 but using 2.7 during migration\n  PYTHON=\"/usr/bin/python2.7\"\nelse\n  # No python2 either by default, let's see if we can find python3\n  PYTHON=\"python3\"\n  if ! command -v ${PYTHON} >/dev/null 2>&1; then\n    echo \"ERROR Python not found. Aborting.\"\n    exit 2\n  fi\nfi\necho \"Version : \" $(${PYTHON} -V 2>&1)\n\nif [[ \"$(is-master)\" == \"true\" ]]; then\n  install-hurl\n  install-inplace\nfi\n\n# download and source kube-env\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\n\ndownload-kubelet-config \"${KUBE_HOME}/kubelet-config.yaml\"\n\n# master certs\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  download-kube-master-certs\nfi\n\n# ensure chosen container runtime is present\nensure-container-runtime\n\n# binaries and kube-system manifests\ninstall-kube-binary-config\n\necho \"Done for installing kubernetes files\"\n\n"
          },
          {
            "key": "disable-legacy-endpoints",
            "value": "true"
          },
          {
            "key": "user-data",
            "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      # Use --retry-connrefused opt only if it's supported by curl.\n      ExecStartPre=/bin/bash -c 'OPT=\"\"; if curl --help | grep -q -- \"--retry-connrefused\"; then OPT=\"--retry-connrefused\"; fi; /usr/bin/curl --fail --retry 5 --retry-delay 3 $OPT --silent --show-error -H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh'\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-container-runtime-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for container runtime\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh container-runtime\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-container-runtime-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n"
          },
          {
            "key": "kube-env",
            "value": "ALLOCATE_NODE_CIDRS: \"true\"\nAPI_SERVER_TEST_LOG_LEVEL: --v=3\nAUTOSCALER_ENV_VARS: kube_reserved=cpu=1060m,memory=512Mi,ephemeral-storage=41Gi;node_labels=cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=e2;os=linux;os_distribution=cos;evictionHard=memory.available=100Mi,nodefs.available=10%,nodefs.inodesFree=5%,pid.available=10%\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLekNDQWhPZ0F3SUJBZ0lSQU1KcUxDdm9uZjZYOEdpa0pmNG1za013RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09HSTRaRGd6WkRBdE5UVXdaQzAwTkRabExUazROekV0WVRReU9XTTRZakprTkRNeApNQjRYRFRJeE1ETXlPVEV5TXprd05Wb1hEVEkyTURNeU9ERXpNemt3TlZvd0x6RXRNQ3NHQTFVRUF4TWtPR0k0ClpEZ3paREF0TlRVd1pDMDBORFpsTFRrNE56RXRZVFF5T1dNNFlqSmtORE14TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBb21tUDVaQXhTQ0IvcVE1TnlwM0h2S3BPVUptSWNWNXpJSzQyV3NQMgorM2E3NmNLWWJsSk9FMEJXaXN6VGZhbkVSOUs0TTZNeDJMQTZ1aW8xV1REdERocmh6ZVZBVHVIbjhGeHZ0OU0rCkJCTmZidnJtN2VJRUQvTUNNOFJSaC9NSzY4b3BjYWpDTEZqTnJvc2lKNE5tdVRLT2MwVmNIUm5YZUNKWFV6YVEKbXpGQW1EQkUzcDlRb2tGUXpGNnd5WmMrN09DcmF3cE43WTNaQkwra3cwQ3hwL0pSOGRXMWxheUpxV3NsY1hkaAppM2xuSGZjZlk1V0owYnJPa00rR1NHQWVhOW94eTJTSVZjcHg3SWJmRk96QUFaZUpUQmkrT0hXUWdGdGpva3d0Cjlwd0JzVnhISXFBRFlUUCtPaDRabmI0V211b292QWF3NGJkZWs2SDNlNjZseHdJREFRQUJvMEl3UURBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWZFZjA1VXY3M0RiQgpLUjdSbjk1RWJuNUFJcUl3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUZ6aXZqaGJjNlBjeFA1NUpkS05QRStwCm5iMmFIZ0c3eVBqOThoMTVENmNXbmppcC9iMEdlVW1FZVkwZGp6Q0FReHcyVWpSYUx1T3E3Y1BBUXVsQW8wNXUKcmY4VnE5VjRZOGlKT1RpbXUwenI2TDloN21HeitTdGc5Y01FNk9FNldXT2tIb0Z0QnhMSXl5RzR4REpIbHdxYwprNXk3NFcvK3pYMEJLbDFNeGF4a3VGRnhFbjBibForSkpnampSWmhTOGJ2RnBjRXhJZjNRSGFMSFc1cktiaHdLCnhLbWhDU2MzdlJlTmpXM2lPVGNZQm1aVStSSG9FcW5US1NZVEFVWUQ2ZEJsUUlzOGFkcTNFS1A1eHZRWEdKZ24KWmxyUmhTQ2VPOFZya2dxTUdUOXlMWTI5UW9aVE00WlB1YSs3WVo4OGtmc3dwamczNFdIbnhHU2lvUks5N1g0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.0.0.0/14\nCLUSTER_NAME: gke1\nCNI_HASH: 60bec898cffa83ee33023df0ea6001940f222e38d360e6829d05b821cff9921842418441abe8cbb9eada606edf50f0fe5730209311b8be5e035db022db4e3a5f\nCNI_SHA1: dcbeba8d6be7a49e399bda6b8b638d312eace876\nCNI_STORAGE_PATH: https://storage.googleapis.com/gke-release/cni-plugins/v0.8.5-gke.1\nCNI_STORAGE_URL_BASE: https://storage.googleapis.com/gke-release/cni-plugins\nCNI_TAR_PREFIX: cni-plugins-linux-amd64-\nCNI_VERSION: v0.8.5-gke.1\nCREATE_BOOTSTRAP_KUBECONFIG: \"true\"\nDETECT_LOCAL_MODE: NodeCIDR\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 10.3.240.10\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: none\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_METADATA_AGENT: \"\"\nENABLE_METRICS_SERVER: \"true\"\nENABLE_NODE_LOGGING: \"false\"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENABLE_NODELOCAL_DNS: \"false\"\nENABLE_SYSCTL_TUNING: \"true\"\nENV_TIMESTAMP: \"2021-03-29T13:39:05+00:00\"\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nFEATURE_GATES: DynamicKubeletConfig=false,RotateKubeletServerCertificate=true\nFLUENTD_CONTAINER_RUNTIME_SERVICE: containerd\nHEAPSTER_USE_NEW_STACKDRIVER_RESOURCES: \"true\"\nHEAPSTER_USE_OLD_STACKDRIVER_RESOURCES: \"false\"\nHPA_USE_REST_CLIENTS: \"true\"\nINSTANCE_PREFIX: gke-gke1-d7ba17f9\nKUBE_ADDON_REGISTRY: k8s.gcr.io\nKUBE_CLUSTER_DNS: 10.3.240.10\nKUBE_DOCKER_REGISTRY: gke.gcr.io\nKUBE_MANIFESTS_TAR_HASH: f2f12d6e76ce094f8d505fd78ac39cf18513377f4b761387e7c74a554fad2d2e27d39d2f8009dd874ea6a908e1468f9029a58868c3d7666f6e2a8b9c3f24a5a2\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.18.15-gke.1501/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release/kubernetes/release/v1.18.15-gke.1501/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.18.15-gke.1501/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: BvqfBp7Gy-wb8G809MHUiQ9rW1pXyZveJ5BJ0zWaKXQ=\nKUBELET_ARGS: --v=2 --cloud-provider=gce --experimental-check-node-capabilities-before-mount=true\n  --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter --cert-dir=/var/lib/kubelet/pki/\n  --cni-bin-dir=/home/kubernetes/bin --kubeconfig=/var/lib/kubelet/kubeconfig --image-pull-progress-deadline=5m\n  --experimental-kernel-memcg-notification=true --max-pods=110 --non-masquerade-cidr=0.0.0.0/0\n  --network-plugin=kubenet --volume-plugin-dir=/home/kubernetes/flexvolume --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig\n  --node-status-max-images=25 --registry-qps=10 --registry-burst=20\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvVENDQWVXZ0F3SUJBZ0lSQVB4S24xb1NuZ0dUeTA2dHBPb1UzTzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09HSTRaRGd6WkRBdE5UVXdaQzAwTkRabExUazROekV0WVRReU9XTTRZakprTkRNeApNQjRYRFRJeE1ETXlPVEV6TXprd05sb1hEVEkyTURNeU9ERXpNemt3Tmxvd0VqRVFNQTRHQTFVRUF4TUhhM1ZpClpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFKSWtLbWcrZVpHcTdtUi8Kb01oMzdQaWY0VnhhRExmSUQ2NkRDOUphS3BveHpBQmFVN3lkaWhZNzhDTW5TeHU3WjROLzRUQ2dVSThKaElxKwovallienRnY2t1ck8yeGJXdDN5d0phWDdYMzhZYXE3Nkh4NjFPUW9MYlQ0d0szN3EycTV3SVV3N1BJRmVXZ0VXCnZnTzVsdUhweVJWdWpJR3Y4NkZkQmN4c3FTbzJYM0xlK0R0VGhHOS9GbVlVaGc5aUV4MzhqRytQY1NPRHV5VmsKZnNLZGNtdmxtbEUyWllOQnJ6QmhMb0ZxVWRNK0dBK25ZTW1nMWxBYWJPMkYzRUFTWjRxQXY3ckllSzlTdUZ0NApuMlNmTU1ncVo5VW5Oc1RLYWZFc0VTQTNsWlNSd3E3Um0wNmw0K1RueGFUaEFRcE45dWJBZnRiVFczZnpXOGx4ClFQNHdBbjhDQXdFQUFhTXhNQzh3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlI4Ui9UbFMvdmMKTnNFcEh0R2Yza1J1ZmtBaW9qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFaNTU4Z2U1TFdxRlk5N1k3S3RoawppUXBZSkJsL3JaaUNBcGJETTF0UGFYRTZwSWFMd2Nmd3Q5eGRTQ3B5SE5DYXYrcVlJWFU2TkFaT1RFZVpuY3NnCnhzMnlPQmNwT2RFRkhIdzBJTjVMeHAxVGlVb2RERUdGUklUNDNFdjJUS3RJbDNIWFdZaXRoVmRwV1JrSVhFQ2sKcnZuTk80OGw4eEVFRzl5NjQ5VitNM2VqMGlOZTBIOHJzMFhFSHdqSlpOOHplUGRxejEwUUI2RitSYWVXTStrRwpTWjMzOEh2TEN3ekgxeVB2Sm5lWE1QMkpkK3NZYlZ6ODZONHFQOGkwZ21HN0cxUzMyKzBiQ0xxcjVhZEhxRGFXCmFaL3JBanBYdTVsSitCb1NjVGNtcU5jTlRpbHdmVldScWtOOXkvcDh2eFFBSTM5K3krOXFKa0NRNUExQVJ3cHgKZGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBa2lRcWFENTVrYXJ1WkgrZ3lIZnMrSi9oWEZvTXQ4Z1Byb01MMGxvcW1qSE1BRnBUCnZKMktGanZ3SXlkTEc3dG5nMy9oTUtCUWp3bUVpcjcrTmh2TzJCeVM2czdiRnRhM2ZMQWxwZnRmZnhocXJ2b2YKSHJVNUNndHRQakFyZnVyYXJuQWhURHM4Z1Y1YUFSYStBN21XNGVuSkZXNk1nYS96b1YwRnpHeXBLalpmY3Q3NApPMU9FYjM4V1poU0dEMklUSGZ5TWI0OXhJNE83SldSK3dwMXlhK1dhVVRabGcwR3ZNR0V1Z1dwUjB6NFlENmRnCnlhRFdVQnBzN1lYY1FCSm5pb0MvdXNoNHIxSzRXM2lmWko4d3lDcG4xU2MyeE1wcDhTd1JJRGVWbEpIQ3J0R2IKVHFYajVPZkZwT0VCQ2szMjVzQisxdE5iZC9OYnlYRkEvakFDZndJREFRQUJBb0lCQUE2STFrYmozOGRqRHE2awpHdU9WT2RaSVlHdUU4VHJlQk9GQVcwNmlkUlk4MmFNM1dKaXJ1bTRYcS94ekRmOUdGamQzNG5lcG1obC93dFRoCnhmcXZyVlRGRXIrVHJ5cUlWRnRzVVhJK20vTFNCTm8rT2hZZHcveUJ3bTJxOE1pQXB4c3VQOEdMS3F0YkxPeHEKeko4bU9DRmoxUUh5cXJyRE95SFRWSjVPT0V6Z1VQVjJ0YkZ4ZTc2TzJ2NlpzZlEyNmY4MHc5djBXbW1BOFFVYgppcGFCWlNVb0dXamh0YlBlZFI0MGI2WHNaekNWTisrMjBSenNyUGk2ZHpJTTFHOWx4NFVmcExnWk81RXF1RUlWClBMMDFWVGtKK1lDa3lUbVU3QmhHNC9zZGNkMFJ1Ulp4QVFma2VHeFlNdTRxKzF1NkFQVGd4aS9aTEdPSFltcmIKSzhjcFBsRUNnWUVBemRHYkhTUmZVN3NKRkNzaHUwdWRLdEtEOXFvNmE0SitnSDdzWExlQzlzeWdWRFpoUVlpdgpNaHBTa2hlWUZXT2xsdTJrdi9qVy9DTThsWUxHSTNJZFMxNTczMGdWQ2g4Qzh0WU9zWTNwaGJQK3M3KytpdTB1Cks2YXpxeXVwLy9sZ3g5bDMybC93Sjl4MUVOUjR5cFVHNDFRKy9oSTVyTjJpd0M2dzN3RWRpRzBDZ1lFQXRjVzUKMzZQQU9JNzMzMHZQVit6NWgxdDNOVFBZbE9tMHhZY2E1M0VralI0VkxZN2pWZUFzTE8vNkhXR1NRRk1rMngzUgpRK1lwc0h6YXM5QVVZYTZIUWp2cldvY01OVnpGT3B3MnJsbjNla2lZb2laSlFYZ0Iwc2o2ZUVIeTlNcHF5YWRRCjBja3VpTjBrUXZwdmlXR0I5cUZ3OXg3MXZENUMzUWRUZkRZM3V4c0NnWUJ0VVV4YThTdTB0RjRCR1Z1a09HZzEKQzNWTitXSm9JZnFBMDJsRllhOHMyTWk3a2RxY1RUWUluWlNIeGdKZ01mb01yUkpaYUpqL2VOTy84YUs5eHVtcQpVM2ZsdzBweGdzRTFLOTdJRGNFZjQ5ZC9yM05NSk9mbUJYZmVqYVdRc09ybm15a2VrdUJpdTZSdUdQeERWVjVBCk5rbnk5c2t0ZU5idHpwN2hBNTJsRFFLQmdIVUxsTnlFdk1tdWhiMnJPeUFLMzhKaEN5bWU4Tjh5ZmN5VGFxZU4KRzFRakF0QUxLaWVwNmNnbDNvLzh2QWZmZ2VQMkYwSDVldTdCOXJIQ1V0MXpYSFV4MENMQ3d3RzVjdWFDb0ZNMAphejY2Y0U0NUNRSzNHN1YyNUpGN0pjNnFhSWpnekJISjBjVWZZTElnUUtIZHY2bm4ycTNGcWNaRThSa1NGcGZzCjhZWHhBb0dBZi9vekFDNnhFRVlhYWhXNS8vWWJ5QUFZczVoUWhYREVRc2R4SXhiTHBRKzZ1cGtUbnhFblU1cy8KNXg4ZU9USkhNYXZJTXdBa0Q0elVFdzRuZ0lCaFlmVGVRVUt6ZWVyS0R5cU1wTzZYZzBZYkVEcHkxelJDbmJ2dgoxQ2NHcnV5eTNXTkc2dDNHaFU5d1RFUTNyckllK0FWVCtxd2ZvcHl3ejZDMGVjUFRDK2M9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 35.189.225.254\nLOGGING_DESTINATION: \"\"\nLOGGING_STACKDRIVER_RESOURCE_TYPES: \"\"\nMONITORING_FLAG_SET: \"true\"\nNETWORK_PROVIDER: kubenet\nNODE_LOCAL_SSDS_EXT: \"\"\nNODE_PROBLEM_DETECTOR_TOKEN: H-liNRgphXKlDjARX7Bq5AHdVjzqN0DWzz0KObeD8XY=\nNON_MASQUERADE_CIDR: 0.0.0.0/0\nREMOUNT_VOLUME_PLUGIN_DIR: \"true\"\nREQUIRE_METADATA_KUBELET_CONFIG_FILE: \"true\"\nSALT_TAR_HASH: \"\"\nSALT_TAR_URL: https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.18.15-gke.1501/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release/kubernetes/release/v1.18.15-gke.1501/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.18.15-gke.1501/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 2e3b1e67245a07caccf3f40490d255345d0f42fba101011a3b5d968aa57e9b616ada157f846aa55740be395668a33ee9b74b17c677d783b05c49c3774ce7f10a\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.18.15-gke.1501/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release/kubernetes/release/v1.18.15-gke.1501/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.18.15-gke.1501/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nSTACKDRIVER_ENDPOINT: https://logging.googleapis.com\nSYSCTL_OVERRIDES: \"\"\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: europe-west1-b\n"
          },
          {
            "key": "cluster-uid",
            "value": "d7ba17f97c554d34bf7f58cd4640e31bfbf02e4e92da473591406411ee9b5c8a"
          },
          {
            "key": "cluster-location",
            "value": "europe-west1-b"
          }
        ],
        "kind": "compute#metadata"
      },
      "name": "gke-gke1-default-pool-d8701509-bmrw",
      "networkInterfaces": [
        {
          "accessConfigs": [
            {
              "kind": "compute#accessConfig",
              "name": "external-nat",
              "natIP": "35.195.18.45",
              "networkTier": "PREMIUM",
              "type": "ONE_TO_ONE_NAT"
            }
          ],
          "fingerprint": "xXEanqEsw1M=",
          "kind": "compute#networkInterface",
          "name": "nic0",
          "network": "https://www.googleapis.com/compute/v1/projects/gcpd-gce1-4exv/global/networks/default",
          "networkIP": "10.132.0.3",
          "subnetwork": "https://www.googleapis.com/compute/v1/projects/gcpd-gce1-4exv/regions/europe-west1/subnetworks/default"
        }
      ],
      "scheduling": {
        "automaticRestart": true,
        "onHostMaintenance": "MIGRATE",
        "preemptible": false
      },
      "selfLink": "https://www.googleapis.com/compute/v1/projects/gcpd-gce1-4exv/zones/europe-west1-b/instances/gke-gke1-default-pool-d8701509-bmrw",
      "serviceAccounts": [
        {
          "email": "50670056743-compute@developer.gserviceaccount.com",
          "scopes": [
            "https://www.googleapis.com/auth/logging.write",
            "https://www.googleapis.com/auth/monitoring"
          ]
        }
      ],
      "shieldedInstanceConfig": {
        "enableIntegrityMonitoring": true,
        "enableSecureBoot": false,
        "enableVtpm": true
      },
      "shieldedInstanceIntegrityPolicy": {
        "updateAutoLearnPolicy": true
      },
      "startRestricted": false,
      "status": "RUNNING",
      "tags": {
        "fingerprint": "G0iE-CSQmss=",
        "items": [
          "gke-gke1-d7ba17f9-node"
        ]
      },
      "zone": "https://www.googleapis.com/compute/v1/projects/gcpd-gce1-4exv/zones/europe-west1-b"
    }
  ],
  "kind": "compute#instanceList",
  "selfLink": "https://www.googleapis.com/compute/v1/projects/gcpd-gce1-4exv/zones/europe-west1-b/instances"
}
