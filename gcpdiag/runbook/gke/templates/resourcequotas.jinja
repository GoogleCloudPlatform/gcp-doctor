
{% block higher_version_quota_exceeded_step_message %}
Verifies that Kubernetes resource quotas usage is within optimal limits
{% endblock higher_version_quota_exceeded_step_message %}

{% block higher_version_quota_exceeded_failure_reason %}
The cluster {CLUSTER} in location {LOCATION} in project {PROJECT} has exceeded its kubernetes resource quota between {START_TIME_UTC} and {END_TIME_UTC} UTC.
Example log entry that would help identify involved objects:

{LOG_ENTRY}
{% endblock higher_version_quota_exceeded_failure_reason %}

{% block higher_version_quota_exceeded_failure_remediation %}
GKE doesn't enforce the Kubernetes resource quotas for clusters running version 1.28 or later, however GKE doesn't restrict you from applying your own Kubernetes resource quotas.
More details: https://cloud.google.com/kubernetes-engine/quotas#resource_quotas
You can use below command to list resourcequota in your cluster.

`kubectl get resourcequota --all-namespaces`

Refer document to know more about kuberntes resource quota: https://kubernetes.io/docs/concepts/policy/resource-quotas/
{% endblock higher_version_quota_exceeded_failure_remediation %}

{% block higher_version_quota_exceeded_success_reason %}
The cluster {CLUSTER} in location {LOCATION} in project {PROJECT} was within its kubernetes resource quota between {START_TIME_UTC} and {END_TIME_UTC} UTC.
{% endblock higher_version_quota_exceeded_success_reason %}

{% block lower_version_quota_exceeded_step_message %}
Verifies that Kubernetes resource quotas usage is within optimal limits
{% endblock lower_version_quota_exceeded_step_message %}

{% block lower_version_quota_exceeded_failure_reason %}
The cluster {CLUSTER} in location {LOCATION} in project {PROJECT} has exceeded its kubernetes resource quota between {START_TIME_UTC} and {END_TIME_UTC} UTC.
Example log entry that would help identify involved objects:

{LOG_ENTRY}
{% endblock lower_version_quota_exceeded_failure_reason %}

{% block lower_version_quota_exceeded_failure_remediation %}
For clusters with under 100 nodes, GKE applies Kubernetes resource quota to every namespace. These quotas protect the cluster's control plane from instability caused by potential bugs in applications deployed to the cluster. You cannot remove these quotas because they are enforced by GKE.
See details: https://cloud.google.com/kubernetes-engine/quotas#resource_quotas
You can use below command to list resourcequota in your cluster.

`kubectl get resourcequota --all-namespaces`

Refer document to know more about resource quota: https://kubernetes.io/docs/concepts/policy/resource-quotas/

There are two resolutions for this issues regarding GKE resource quotas with name "gke-resource-quotas". Kindly open the GCP support case to increase a resource quota to a specific number or request to disable GKE resource quotas for the cluster.
{% endblock lower_version_quota_exceeded_failure_remediation %}

{% block lower_version_quota_exceeded_success_reason %}
The cluster {CLUSTER} in location {LOCATION} in project {PROJECT} was within its kubernetes resource quota between {START_TIME_UTC} and {END_TIME_UTC} UTC.
{% endblock lower_version_quota_exceeded_success_reason %}
